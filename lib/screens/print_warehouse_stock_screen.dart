import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:printing/printing.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import '../backend/warehouse_logic.dart';
import '../l10n/app_localizations.dart';
import 'package:flutter/services.dart' show rootBundle;
class PrintWarehouseStockScreen extends StatelessWidget {
  final List<WarehouseStock> stocks;
  final String warehouseName;
  final String warehouseCode;

  const PrintWarehouseStockScreen({
    super.key,
    required this.stocks,
    required this.warehouseName,
    required this.warehouseCode,
  });

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context);
    
    return Scaffold(
      appBar: AppBar(
        title: Text(localizations?.printPreview ?? 'Print Preview'),
        actions: [
          IconButton(
            icon: const Icon(Icons.print),
            // مرر الـ context عشان نعرف اللغة داخل الدالة
            onPressed: () => _printDocument(context),
            tooltip: localizations?.print ?? 'Print',
          ),
        ],
      ),
      body: PdfPreview(
        build: (format) => _generatePdf(
          format,
          localizations,
          Localizations.localeOf(context).languageCode == 'ar',
        ),
        actions: [
          PdfPreviewAction(
            icon: const Icon(Icons.save),
            onPressed: (context, build, pageFormat) async {
              final bytes = await build(pageFormat);
              await Printing.sharePdf(
                bytes: bytes,
                filename: 'warehouse_stock_${warehouseCode}_${DateTime.now().millisecondsSinceEpoch}.pdf',
              );
            },
          ),
        ],
        allowPrinting: true,
        allowSharing: true,
        canChangeOrientation: true,
        canChangePageFormat: true,
        canDebug: false,
        maxPageWidth: 700,
        pdfFileName: 'warehouse_stock_${warehouseCode}_${DateTime.now().millisecondsSinceEpoch}.pdf',
      ),
    );
  }

  // استخدم خط أساسي لاتيني + خط بديل عربي
  Future<Uint8List> _generatePdf(
    PdfPageFormat format,
    AppLocalizations? localizations,
    bool isArabic,
  ) async {
    final pdf = pw.Document();

    final arabicFont = pw.Font.ttf(
      await rootBundle.load('assets/fonts/Amiri-Regular.ttf')
    );

    pdf.addPage(
      pw.MultiPage(
        pageFormat: format,
        margin: const pw.EdgeInsets.all(40),
        textDirection: isArabic ? pw.TextDirection.rtl : pw.TextDirection.ltr,
        // اجعل الخط الافتراضي Amiri لضمان تشكيل العربية
        theme: pw.ThemeData.withFont(
          base: arabicFont,
          bold: arabicFont,
          italic: arabicFont,
          boldItalic: arabicFont,
        ),
        footer: (context) => pw.Container(
          margin: const pw.EdgeInsets.only(top: 12),
          child: pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              pw.Text(
                'Generated by: Warehouse Management System',
                style: pw.TextStyle(
                  fontSize: 10,
                  color: PdfColors.grey600,
                  font: arabicFont,
                ),
              ),
              pw.Text(
                'Page ${context.pageNumber} of ${context.pagesCount}',
                style: pw.TextStyle(
                  fontSize: 10,
                  color: PdfColors.grey600,
                  font: arabicFont,
                ),
              ),
            ],
          ),
        ),

        build: (pw.Context context) {
          return [
            // Header
            pw.Container(
              padding: const pw.EdgeInsets.all(20),
              decoration: pw.BoxDecoration(
                color: PdfColors.blue50,
                borderRadius: pw.BorderRadius.circular(8),
              ),
              child: pw.Column(
                crossAxisAlignment: isArabic
                    ? pw.CrossAxisAlignment.end
                    : pw.CrossAxisAlignment.start,
                children: [
                  pw.Row(
                    mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                    children: [
                      pw.Text(
                        isArabic ? 'تقرير مخزون المستودع' : 'Warehouse Stock Report',
                        style: pw.TextStyle(
                          fontSize: 24,
                          fontWeight: pw.FontWeight.bold,
                          font: arabicFont,
                        ),
                        // لو العنوان عربي في وضع EN
                        textDirection: isArabic ? pw.TextDirection.rtl : pw.TextDirection.ltr,
                      ),
                      pw.Text(
                        '${DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year}',
                        style: pw.TextStyle(
                          fontSize: 14,
                          font: arabicFont,
                        ),
                        textDirection: pw.TextDirection.ltr,
                      ),
                    ],
                  ),
                  pw.SizedBox(height: 10),
                  pw.Row(
                    children: [
                      pw.Text(
                        isArabic ? 'المستودع: ' : 'Warehouse: ',
                        style: pw.TextStyle(
                          fontWeight: pw.FontWeight.bold,
                          font: arabicFont,
                        ),
                        textDirection: isArabic ? pw.TextDirection.rtl : pw.TextDirection.ltr,
                      ),
                      // اسم المستودع قد يكون عربي حتى في واجهة إنجليزية
                      pw.Text(
                        warehouseName,
                        style: pw.TextStyle(font: arabicFont),
                        textDirection: _containsArabic(warehouseName)
                            ? pw.TextDirection.rtl
                            : pw.TextDirection.ltr,
                      ),
                      pw.SizedBox(width: 20),
                      pw.Text(
                        isArabic ? 'الكود: ' : 'Code: ',
                        style: pw.TextStyle(
                          fontWeight: pw.FontWeight.bold,
                          font: arabicFont,
                        ),
                        textDirection: isArabic ? pw.TextDirection.rtl : pw.TextDirection.ltr,
                      ),
                      pw.Text(
                        warehouseCode,
                        style: pw.TextStyle(font: arabicFont),
                        textDirection: pw.TextDirection.ltr,
                      ),
                    ],
                  ),
                  pw.SizedBox(height: 5),
                  pw.Text(
                    isArabic
                        ? 'إجمالي المنتجات: ${stocks.length}'
                        : 'Total Products: ${stocks.length}',
                    style: pw.TextStyle(
                      fontSize: 12,
                      font: arabicFont,
                    ),
                    textDirection: isArabic ? pw.TextDirection.rtl : pw.TextDirection.ltr,
                  ),
                ],
              ),
            ),
            pw.SizedBox(height: 20),

            // Table
            pw.Table(
              border: pw.TableBorder.all(color: PdfColors.grey300),
              children: [
                pw.TableRow(
                  decoration: const pw.BoxDecoration(color: PdfColors.blue100),
                  children: [
                    _buildTableHeader(
                      isArabic ? 'كود المنتج' : 'Product ID',
                      arabicFont,
                      isArabic,
                    ),
                    _buildTableHeader(
                      isArabic ? 'اسم المنتج' : 'Product Name',
                      arabicFont,
                      isArabic,
                    ),
                    _buildTableHeader(
                      isArabic ? 'الفئة' : 'Category',
                      arabicFont,
                      isArabic,
                    ),
                    _buildTableHeader(
                      isArabic ? 'الكمية' : 'Quantity',
                      arabicFont,
                      isArabic,
                    ),
                    _buildTableHeader(
                      isArabic ? 'الوحدة' : 'Unit',
                      arabicFont,
                      isArabic,
                    ),
                  ],
                ),
                // Data Rows
                ...stocks.map((stock) => pw.TableRow(
                  children: [
                    _buildTableCell(stock.productId, arabicFont, isArabic),
                    _buildTableCell(stock.productName ?? '', arabicFont, isArabic),
                    _buildTableCell(stock.categoryName ?? 'General', arabicFont, isArabic),
                    _buildTableCell(
                      stock.currentQuantity.toString(),
                      arabicFont,
                      isArabic,
                      isNumber: true,
                    ),
                    _buildTableCell(stock.unit, arabicFont, isArabic),
                  ],
                )),
              ],
            ),
            pw.SizedBox(height: 20),

            // Summary
            pw.Container(
              padding: const pw.EdgeInsets.all(15),
              decoration: pw.BoxDecoration(
                color: PdfColors.grey100,
                borderRadius: pw.BorderRadius.circular(8),
              ),
              child: pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceAround,
                children: [
                  _buildSummaryItem(
                    isArabic ? 'إجمالي العناصر' : 'Total Items',
                    stocks.length.toString(),
                    arabicFont,
                  ),
                  _buildSummaryItem(
                    isArabic ? 'إجمالي الكمية' : 'Total Quantity',
                    stocks.fold<double>(0, (sum, item) => sum + item.currentQuantity).toStringAsFixed(2),
                    arabicFont,
                  ),
                  _buildSummaryItem(
                    isArabic ? 'نفذ المخزون' : 'Out of Stock',
                    stocks.where((s) => s.currentQuantity == 0).length.toString(),
                    arabicFont,
                  ),
                ],
              ),
            ),
          ];
        },
      ),
    );

    return pdf.save();
  }

  // helper: يكتشف إن كان النص يحتوي على حروف عربية
  bool _containsArabic(String s) {
    return RegExp(r'[\u0600-\u06FF]').hasMatch(s);
  }

  pw.Widget _buildTableHeader(String text, pw.Font font, bool isArabic) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(8),
      child: pw.Text(
        text,
        style: pw.TextStyle(
          fontWeight: pw.FontWeight.bold,
          fontSize: 12,
          font: font,
        ),
        textAlign: isArabic ? pw.TextAlign.right : pw.TextAlign.left,
        // مهم: تحديد اتجاه النص لتفعيل تشكيل العربية
        textDirection: isArabic ? pw.TextDirection.rtl : pw.TextDirection.ltr,
      ),
    );
  }

  pw.Widget _buildTableCell(String text, pw.Font font, bool isArabic, {bool isNumber = false}) {
    final hasArabic = _containsArabic(text);
    return pw.Container(
      padding: const pw.EdgeInsets.all(8),
      child: pw.Text(
        text,
        style: pw.TextStyle(
          fontSize: 11,
          font: font,
        ),
        // أرقام و IDs تبقى LTR، أما النص العربي RTL حتى لو واجهة إنجليزية
        textDirection: isNumber
            ? pw.TextDirection.ltr
            : (hasArabic ? pw.TextDirection.rtl : pw.TextDirection.ltr),
        textAlign: isNumber
            ? pw.TextAlign.center
            : (hasArabic ? pw.TextAlign.right : pw.TextAlign.left),
      ),
    );
  }
  pw.Widget _buildSummaryItem(String label, String value, pw.Font font) {
    return pw.Column(
      children: [
        pw.Text(
          label,
          style: pw.TextStyle(
            fontSize: 10,
            color: PdfColors.grey600,
            font: font,
          ),
        ),
        pw.SizedBox(height: 5),
        pw.Text(
          value,
          style: pw.TextStyle(
            fontSize: 16,
            fontWeight: pw.FontWeight.bold,
            font: font,
          ),
        ),
      ],
    );
  }

  Future<void> _printDocument(BuildContext context) async {
    final isArabic = Localizations.localeOf(context).languageCode == 'ar';
    final loc = AppLocalizations.of(context);
    await Printing.layoutPdf(
      onLayout: (PdfPageFormat format) => _generatePdf(format, loc, isArabic),
    );
  }

  Future<void> _saveAsFile(PdfPageFormat format) async {
    final bytes = await _generatePdf(format, null, false);
    
    // Save file logic
    await Printing.sharePdf(
      bytes: bytes,
      filename: 'warehouse_stock_${warehouseCode}_${DateTime.now().millisecondsSinceEpoch}.pdf',
    );
  }
}